<?php
declare(strict_types=1);

namespace XYZ\Tests\Salaries\UI\CLI;

use Doctrine\ORM\EntityManagerInterface;
use Money\Money;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\Console\Helper\Table;
use Symfony\Component\Console\Output\BufferedOutput;
use Symfony\Component\Console\Tester\CommandTester;
use Symfony\Component\HttpKernel\KernelInterface;
use Symfony\Component\Uid\Uuid;
use XYZ\Salaries\Domain\Entity\Department;
use XYZ\Salaries\Domain\Entity\Employee;
use XYZ\Salaries\Domain\ValueObject\BaseSalary;
use XYZ\Salaries\Domain\ValueObject\EmployeeName;
use XYZ\Salaries\Domain\ValueObject\PercentageSupplement;

class GeneratePayrollCommandTest extends KernelTestCase
{

    private Application $application;

    protected function setUp(): void
    {
        $kernel = self::bootKernel();
        $this->application = new Application($kernel);


        /** @var EntityManagerInterface $em */
        $em = $kernel->getContainer()->get('doctrine')->getManager();
        $department = new Department(
            Uuid::fromString('29e62eb2-4971-468e-9862-25ab3c9b8532'),
            'Example Department',
            new PercentageSupplement(20),
        );

        $employee = new Employee(
            Uuid::fromString('4dd4e998-ad07-4a6b-bd0f-5ebb1137acea'),
            new EmployeeName('Anna', 'Nowak'),
            new \DateTimeImmutable('2020-01-01'),
            $department,
            new BaseSalary(Money::USD(2000_00)),
        );

        $em->persist($department);
        $em->persist($employee);
        $em->flush();

        parent::setUp(); // TODO: Change the autogenerated stub
    }


    public function testPayrollCanBeGenerated(): void
    {



        $command = $this->application->find('xyz:payroll:generate');
        $commandTester = new CommandTester($command);
        $commandTester->execute([
            // pass arguments to the helper
//            'username' => 'Wouter',

            // prefix the key with two dashes when passing options,
            // e.g: '--some-option' => 'option_value',
        ]);


        $commandTester->assertCommandIsSuccessful();

        $actualOutput = $commandTester->getDisplay();

        $bufferedOutput = new BufferedOutput();
        $table = new Table($bufferedOutput);
        $table
            ->setHeaders(['First name', 'Last name', 'Department', 'Base salary', 'Total salary'])
            ->setRows([
                ['Anna', 'Nowak', 'Example Department', '2 000,00 USD', '2 400,00 USD'],
            ])
            ->render()
        ;

        $expectedOutput = $bufferedOutput->fetch();

        self::assertEquals($expectedOutput, $actualOutput);
    }
}
